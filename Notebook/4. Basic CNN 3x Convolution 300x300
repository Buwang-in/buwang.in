{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":52187,"status":"ok","timestamp":1684906807188,"user":{"displayName":"Diva Kemala M169DSY1815","userId":"10748961710050122693"},"user_tz":-420},"id":"LjVE9FiMMuLk","outputId":"af2145a5-7989-4564-e421-224232807dc3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["# Mount Drive\n","import os\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1911,"status":"ok","timestamp":1684906862678,"user":{"displayName":"Diva Kemala M169DSY1815","userId":"10748961710050122693"},"user_tz":-420},"id":"EGAKqL3RRVom","outputId":"153a61af-b936-466a-df85-b84adf1dfbd4"},"outputs":[{"name":"stdout","output_type":"stream","text":["Contents of base directory:\n","['train', 'validation']\n","\n","Contents of train directory:\n","['Kardus', 'Kaca (White \u0026 Green)', 'Plastik', 'Kertas', 'Logam', 'Organik', 'Botol Plastik', 'Botol Kaca']\n","\n","Contents of validation directory:\n","['Kardus', 'Kaca (White \u0026 Green)', 'Plastik', 'Kertas', 'Logam', 'Organik', 'Botol Plastik', 'Botol Kaca']\n"]}],"source":["base_dir = '/content/drive/Shareddrives/CAPSTONE C23-PS061/Dataset Split'\n","\n","print(\"Contents of base directory:\")\n","print(os.listdir(base_dir))\n","\n","print(\"\\nContents of train directory:\")\n","print(os.listdir(f'{base_dir}/train'))\n","\n","print(\"\\nContents of validation directory:\")\n","print(os.listdir(f'{base_dir}/validation'))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8643,"status":"ok","timestamp":1684906875299,"user":{"displayName":"Diva Kemala M169DSY1815","userId":"10748961710050122693"},"user_tz":-420},"id":"h8bFiTs5R8tI","outputId":"947f52d5-9a00-49dc-bb1e-f1b215952e35"},"outputs":[{"name":"stdout","output_type":"stream","text":["Number of files in each class (train):\n","Kardus: 623 files\n","Kaca (White \u0026 Green): 560 files\n","Plastik: 691 files\n","Kertas: 751 files\n","Logam: 538 files\n","Organik: 696 files\n","Botol Plastik: 700 files\n","Botol Kaca: 698 files\n","\n","Number of files in each class (validation):\n","Kardus: 268 files\n","Kaca (White \u0026 Green): 241 files\n","Plastik: 304 files\n","Kertas: 322 files\n","Logam: 231 files\n","Organik: 299 files\n","Botol Plastik: 300 files\n","Botol Kaca: 300 files\n"]}],"source":["# Import train_dir \u0026 validation_dir\n","train_dir = f'{base_dir}/train'\n","validation_dir = f'{base_dir}/validation'\n","\n","# Print the number of files in each class for train and validation\n","print(\"Number of files in each class (train):\")\n","for class_folder in os.listdir(train_dir):\n","    class_folder_path = os.path.join(train_dir, class_folder)\n","    num_files = len(os.listdir(class_folder_path))\n","    print(f\"{class_folder}: {num_files} files\")\n","\n","print(\"\\nNumber of files in each class (validation):\")\n","for class_folder in os.listdir(validation_dir):\n","    class_folder_path = os.path.join(validation_dir, class_folder)\n","    num_files = len(os.listdir(class_folder_path))\n","    print(f\"{class_folder}: {num_files} files\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dRVv0UuxV7CC"},"outputs":[],"source":["import tensorflow as tf\n","\n","# Menentukan dimensi gambar dan jumlah kelas\n","image_width = 300\n","image_height = 300\n","num_classes = 8"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":396,"status":"ok","timestamp":1684906887596,"user":{"displayName":"Diva Kemala M169DSY1815","userId":"10748961710050122693"},"user_tz":-420},"id":"MvZ9-LTRlGqw","outputId":"977a15ee-50ed-41ca-899d-56ad0dd5537d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 5257 images belonging to 8 classes.\n","Found 2265 images belonging to 8 classes.\n"]}],"source":["from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","# Pra-pemrosesan dan augmentasi gambar menggunakan ImageDataGenerator\n","train_datagen = ImageDataGenerator(rescale=1./255,  # Skala ulang intensitas pixel menjadi rentang 0-1\n","                                   rotation_range=20,  # Rotasi acak gambar dalam rentang 0-20 derajat\n","                                   #width_shift_range=0.2,  # Pergeseran horizontal acak pada gambar\n","                                   #height_shift_range=0.2,  # Pergeseran vertikal acak pada gambar\n","                                   #horizontal_flip=True,  # Flip horizontal acak pada gambar\n","                                   )  \n","\n","validation_datagen = ImageDataGenerator(rescale=1./255)  # Skala ulang intensitas pixel gambar validasi\n","\n","# Menggunakan ImageDataGenerator untuk memuat dan mempersiapkan data latihan\n","train_generator = train_datagen.flow_from_directory(\n","    train_dir,\n","    target_size=(image_width, image_height),\n","    batch_size=32,\n","    class_mode='categorical')\n","\n","# Menggunakan ImageDataGenerator untuk memuat dan mempersiapkan data validasi\n","validation_generator = validation_datagen.flow_from_directory(\n","    validation_dir,\n","    target_size=(image_width, image_height),\n","    batch_size=32,\n","    class_mode='categorical')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yDNrLQdBlO_P"},"outputs":[],"source":["# Membangun model CNN\n","model = tf.keras.models.Sequential([\n","    tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(image_width, image_height, 3)),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n","    tf.keras.layers.MaxPooling2D((2, 2)),\n","    tf.keras.layers.Flatten(),\n","    tf.keras.layers.Dense(512, activation='relu'),\n","    tf.keras.layers.Dense(num_classes, activation='softmax')\n","])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7IqRTJkPlXX2"},"outputs":[],"source":["# Mengompilasi model\n","model.compile(optimizer='adam',\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"5ZShcUMulY57"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","164/164 [==============================] - 151s 918ms/step - loss: 0.1135 - accuracy: 0.9656 - val_loss: 1.6964 - val_accuracy: 0.7763\n","Epoch 2/20\n","164/164 [==============================] - 130s 793ms/step - loss: 0.0266 - accuracy: 0.9925 - val_loss: 1.5976 - val_accuracy: 0.7737\n","Epoch 3/20\n","164/164 [==============================] - 132s 804ms/step - loss: 0.0269 - accuracy: 0.9920 - val_loss: 2.1279 - val_accuracy: 0.7629\n","Epoch 4/20\n","164/164 [==============================] - 138s 842ms/step - loss: 0.0550 - accuracy: 0.9856 - val_loss: 1.5982 - val_accuracy: 0.7701\n","Epoch 5/20\n","164/164 [==============================] - 136s 829ms/step - loss: 0.0299 - accuracy: 0.9900 - val_loss: 1.8064 - val_accuracy: 0.7741\n","Epoch 6/20\n","164/164 [==============================] - 137s 838ms/step - loss: 0.0217 - accuracy: 0.9918 - val_loss: 1.7363 - val_accuracy: 0.7893\n","Epoch 7/20\n","164/164 [==============================] - 130s 791ms/step - loss: 0.0272 - accuracy: 0.9920 - val_loss: 2.3641 - val_accuracy: 0.7464\n","Epoch 8/20\n","164/164 [==============================] - 138s 844ms/step - loss: 0.0772 - accuracy: 0.9830 - val_loss: 1.8270 - val_accuracy: 0.7344\n","Epoch 9/20\n","164/164 [==============================] - 139s 847ms/step - loss: 0.0798 - accuracy: 0.9767 - val_loss: 1.9946 - val_accuracy: 0.7478\n","Epoch 10/20\n","164/164 [==============================] - 137s 836ms/step - loss: 0.0426 - accuracy: 0.9872 - val_loss: 1.5600 - val_accuracy: 0.7759\n","Epoch 11/20\n","164/164 [==============================] - 137s 839ms/step - loss: 0.0252 - accuracy: 0.9925 - val_loss: 1.6361 - val_accuracy: 0.7808\n","Epoch 12/20\n","164/164 [==============================] - 138s 842ms/step - loss: 0.0207 - accuracy: 0.9925 - val_loss: 1.8640 - val_accuracy: 0.7844\n","Epoch 13/20\n","150/164 [==========================\u003e...] - ETA: 10s - loss: 0.0214 - accuracy: 0.9950"]}],"source":["# Melatih model menggunakan data latihan dan validasi\n","history = model.fit(\n","    train_generator,\n","    steps_per_epoch=train_generator.n // train_generator.batch_size,\n","    epochs=20,\n","    validation_data=validation_generator,\n","    validation_steps=validation_generator.n // validation_generator.batch_size)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UEsoY9i0la6Z"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","\n","# Mengambil nilai akurasi dan loss dari objek history\n","accuracy = history.history['accuracy']\n","loss = history.history['loss']\n","val_accuracy = history.history['val_accuracy']\n","\n","# Menghitung jumlah epoch\n","epochs = range(1, len(accuracy) + 1)\n","\n","# Plot akurasi training dan validation\n","plt.plot(epochs, accuracy, 'b', label='Training Accuracy')\n","plt.plot(epochs, val_accuracy, 'r', label='Validation Accuracy')\n","plt.title('Training and Validation Accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.show()\n","\n","# Plot loss training\n","plt.plot(epochs, loss, 'b', label='Training Loss')\n","plt.title('Training Loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"c56iq3fMlwPP"},"outputs":[],"source":["# Menyimpan model\n","model.save('/content/drive/Shareddrives/CAPSTONE C23-PS061/Model/model3xConvolutionalNoAugmentasi.h5')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sBis6LB2wVbl"},"outputs":[],"source":[]}],"metadata":{"accelerator":"GPU","colab":{"name":"","version":""},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}